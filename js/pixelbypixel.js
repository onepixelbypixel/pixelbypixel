class pixelbypixel{constructor(t={}){this.drawto=t.to||document.getElementById("canvas"),this.drawfrom=t.from||document.getElementById("defaultImage"),this.hFI(),this.scale=t.scale&&t.scale>0&&t.scale<=50?.01*t.scale:.08,this.palette=t.palette||[[0,0,0],[255,255,255],[255,218,69],[73,231,236]],this.maxHeight=t.maxHeight,this.maxWidth=t.maxWidth,this.ctx=this.drawto.getContext("2d")}hFI(){return this.drawfrom.style.visibility="hidden",this.drawfrom.style.position="fixed",this.drawfrom.style.top=0,this.drawfrom.style.left=0,this}sFIS(t){return this.drawfrom.src=t,this}sP(t){return this.palette=t,this}sS(t){return this.scale=t>0&&t<=50?.01*t:.08,this}cS(t,a){let h=0;for(let i=0;i<3;i++){const e=t[i]-a[i];h+=e*e}return Math.sqrt(h)}sC(t){let a=this.palette[0],h=this.cS(t,a);for(let i=1;i<this.palette.length;i++){const e=this.palette[i],d=this.cS(t,e);if(d<h&&(a=e,h=d),0===d)break}return a}p(){this.drawto.width=this.drawfrom.naturalWidth,this.drawto.height=this.drawfrom.naturalHeight;let t=this.drawto.width*this.scale,a=this.drawto.height*this.scale;const h=document.createElement("canvas");h.width=this.drawto.width,h.height=this.drawto.height,h.style.visibility="hidden",h.style.position="fixed",h.style.top="0",h.style.left="0",(this.drawto.width>900||this.drawto.height>900)&&(this.scale*=.5,t=this.drawto.width*this.scale,a=this.drawto.height*this.scale,h.width=Math.max(t,a)+50,h.height=Math.max(t,a)+50),h.getContext("2d").drawImage(this.drawfrom,0,0,t,a),document.body.appendChild(h),this.ctx.mozImageSmoothingEnabled=!1,this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1;let i=this.drawfrom.naturalWidth;this.drawfrom.naturalWidth>300&&(i+=this.drawfrom.naturalWidth>this.drawfrom.naturalHeight?parseInt(this.drawfrom.naturalWidth/(this.drawfrom.naturalWidth*this.scale))/1.5:parseInt(this.drawfrom.naturalWidth/(this.drawfrom.naturalWidth*this.scale)));let e=this.drawfrom.naturalHeight;return this.drawfrom.naturalHeight>300&&(e+=this.drawfrom.naturalHeight>this.drawfrom.naturalWidth?parseInt(this.drawfrom.naturalHeight/(this.drawfrom.naturalHeight*this.scale))/1.5:parseInt(this.drawfrom.naturalHeight/(this.drawfrom.naturalHeight*this.scale))),this.ctx.drawImage(h,0,0,t,a,0,0,i,e),h.remove(),this}cGS(){const t=this.drawto.width,a=this.drawto.height;let h=this.ctx.getImageData(0,0,t,a);for(let t=0;t<h.height;t++)for(let a=0;a<h.width;a++){let i=4*t*h.width+4*a,e=(h.data[i]+h.data[i+1]+h.data[i+2])/3;h.data[i]=e,h.data[i+1]=e,h.data[i+2]=e}return this.ctx.putImageData(h,0,0,0,0,h.width,h.height),this}cLA(t=255){const a=this.drawto.width,h=this.drawto.height;let i=this.ctx.getImageData(0,0,a,h);for(let t=0;t<i.data.length;t+=4){const a=.299*i.data[t]+.587*i.data[t+1]+.114*i.data[t+2];i.data[t]=a,i.data[t+1]=a,i.data[t+2]=a}const e=this.convolve(i,[-1,-1,-1,-1,8,-1,-1,-1,-1],3,1,0);for(let t=0;t<e.data.length;t+=4)e.data[t]=255-e.data[t],e.data[t+1]=255-e.data[t+1],e.data[t+2]=255-e.data[t+2];for(let a=0;a<e.data.length;a+=4){(e.data[a]+e.data[a+1]+e.data[a+2])/3<t?(e.data[a]=0,e.data[a+1]=0,e.data[a+2]=0):(e.data[a]=255,e.data[a+1]=255,e.data[a+2]=255)}for(let t=0;t<i.data.length;t+=4){const a=i.data[t],h=e.data[t],d=Math.min(255,a+h);i.data[t]=d,i.data[t+1]=d,i.data[t+2]=d}return this.ctx.putImageData(i,0,0,0,0,i.width,i.height),this}convolve(t,a,h,i,e){const d=new ImageData(t.width,t.height),s=Math.floor(h/2);for(let r=0;r<t.height;r++)for(let o=0;o<t.width;o++){let l=0,n=0,w=0,m=0;for(let i=0;i<h;i++)for(let e=0;e<h;e++){const d=o+e-s,g=r+i-s;if(d>=0&&d<t.width&&g>=0&&g<t.height){const s=4*(g*t.width+d),r=i*h+e;l+=a[r]*t.data[s],n+=a[r]*t.data[s+1],w+=a[r]*t.data[s+2],m+=a[r]*t.data[s+3]}}const g=4*(r*t.width+o);d.data[g]=Math.min(255,Math.max(0,l/i+e)),d.data[g+1]=Math.min(255,Math.max(0,n/i+e)),d.data[g+2]=Math.min(255,Math.max(0,w/i+e)),d.data[g+3]=Math.min(255,Math.max(0,m/i+e))}return d}cP(){const t=this.drawto.width,a=this.drawto.height;let h=this.ctx.getImageData(0,0,t,a);for(let t=0;t<h.height;t++)for(let a=0;a<h.width;a++){let i=4*t*h.width+4*a;const e=this.sC([h.data[i],h.data[i+1],h.data[i+2]]);h.data[i]=e[0],h.data[i+1]=e[1],h.data[i+2]=e[2]}return this.ctx.putImageData(h,0,0,0,0,h.width,h.height),this}rI(){const t=document.createElement("canvas"),a=t.getContext("2d");let h=1;return this.maxWidth||this.maxHeight?(this.maxWidth&&this.drawto.width>this.maxWidth&&(h=this.maxWidth/this.drawto.width),this.maxHeight&&this.drawto.height>this.maxHeight&&(h=this.maxHeight/this.drawto.height),t.width=this.drawto.width,t.height=this.drawto.height,a.drawImage(this.drawto,0,0),this.drawto.width=this.drawto.width*h,this.drawto.height=this.drawto.height*h,this.ctx.drawImage(t,0,0,t.width,t.height,0,0,this.drawto.width,this.drawto.height),this):0}draw(){return this.drawto.width=this.drawfrom.width,this.drawto.height=this.drawfrom.height,this.ctx.drawImage(this.drawfrom,0,0),this.rI(),this}sI(){const t=document.createElement("a");t.download="image.png",t.href=this.drawto.toDataURL("image/png").replace("image/png","image/octet-stream"),document.querySelector("body").appendChild(t),t.click(),document.querySelector("body").removeChild(t)}fH(){let t=this.ctx.canvas.getContext("2d"),a=this.ctx.canvas,h=t.getImageData(0,0,a.width,a.height),i=h.data;for(let t=0;t<a.height;t++)for(let h=0;h<a.width/2;h++){let e=4*(t*a.width+h),d=4*(t*a.width+(a.width-h-1)),s=i[e],r=i[e+1],o=i[e+2],l=i[e+3];i[e]=i[d],i[e+1]=i[d+1],i[e+2]=i[d+2],i[e+3]=i[d+3],i[d]=s,i[d+1]=r,i[d+2]=o,i[d+3]=l}t.putImageData(h,0,0)}iC(){let t=this.ctx.canvas.getContext("2d"),a=this.ctx.canvas,h=t.getImageData(0,0,a.width,a.height);const i=new Set;for(let t=0;t<h.data.length;t+=4){const a=[h.data[t],h.data[t+1],h.data[t+2]].join(",");i.add(a)}const e=Array.from(i).map(t=>t.split(",").map(t=>parseInt(t))),d=document.getElementById("detected-palettecolor");d.innerHTML="";for(let t=0;t<e.length;t++){const a=document.createElement("div");a.className="colorbox",a.style.backgroundColor=`rgb(${e[t][0]}, ${e[t][1]}, ${e[t][2]})`,a.style.width="20px",a.style.height="20px",d.appendChild(a)}}}