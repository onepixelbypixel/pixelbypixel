class pixelbypixel{constructor(config={}){this.drawto=config.to||document.getElementById("canvas");this.drawfrom=config.from||document.getElementById("defaultImage");this.hFI();this.scale=config.scale&&config.scale>0&&config.scale<=50?config.scale*0.01:8*0.01;this.palette=config.palette||[[0,0,0],[255,255,255],[255,218,69],[73,231,236],];this.maxHeight=config.maxHeight;this.maxWidth=config.maxWidth;this.ctx=this.drawto.getContext("2d");}
hFI(){this.drawfrom.style.visibility="hidden";this.drawfrom.style.position="fixed";this.drawfrom.style.top=0;this.drawfrom.style.left=0;return this;}
sFIS(src){this.drawfrom.src=src;return this;}
sP(arr){this.palette=arr;return this;}
sS(scale){this.scale=scale>0&&scale<=50?scale*0.01:8*0.01;return this;}
cS(rgbColor,compareColor){let sumOfSquaredDifferences=0;for(let i=0;i<3;i++){const difference=rgbColor[i]-compareColor[i];sumOfSquaredDifferences+=difference*difference;}
return Math.sqrt(sumOfSquaredDifferences);}
sC(actualColor){let selectedColor=this.palette[0];let smallestDifference=this.cS(actualColor,selectedColor);for(let i=1;i<this.palette.length;i++){const currentColor=this.palette[i];const difference=this.cS(actualColor,currentColor);if(difference<smallestDifference){selectedColor=currentColor;smallestDifference=difference;}
if(difference===0){break;}}
return selectedColor;}
p(){this.drawto.width=this.drawfrom.naturalWidth;this.drawto.height=this.drawfrom.naturalHeight;let scaledW=this.drawto.width*this.scale;let scaledH=this.drawto.height*this.scale;const tempCanvas=document.createElement("canvas");tempCanvas.width=this.drawto.width;tempCanvas.height=this.drawto.height;tempCanvas.style.visibility="hidden";tempCanvas.style.position="fixed";tempCanvas.style.top="0";tempCanvas.style.left="0";if(this.drawto.width>900||this.drawto.height>900){this.scale*=0.5;scaledW=this.drawto.width*this.scale;scaledH=this.drawto.height*this.scale;tempCanvas.width=Math.max(scaledW,scaledH)+50;tempCanvas.height=Math.max(scaledW,scaledH)+50;}
const tempContext=tempCanvas.getContext("2d");tempContext.drawImage(this.drawfrom,0,0,scaledW,scaledH);document.body.appendChild(tempCanvas);this.ctx.mozImageSmoothingEnabled=false;this.ctx.webkitImageSmoothingEnabled=false;this.ctx.imageSmoothingEnabled=false;let finalWidth=this.drawfrom.naturalWidth;if(this.drawfrom.naturalWidth>300){finalWidth+=this.drawfrom.naturalWidth>this.drawfrom.naturalHeight?parseInt(this.drawfrom.naturalWidth /
(this.drawfrom.naturalWidth*this.scale))/ 1.5:parseInt(this.drawfrom.naturalWidth /
(this.drawfrom.naturalWidth*this.scale));}
let finalHeight=this.drawfrom.naturalHeight;if(this.drawfrom.naturalHeight>300){finalHeight+=this.drawfrom.naturalHeight>this.drawfrom.naturalWidth?parseInt(this.drawfrom.naturalHeight /
(this.drawfrom.naturalHeight*this.scale))/ 1.5:parseInt(this.drawfrom.naturalHeight /
(this.drawfrom.naturalHeight*this.scale));}
this.ctx.drawImage(tempCanvas,0,0,scaledW,scaledH,0,0,finalWidth,finalHeight);tempCanvas.remove();return this;}
cGS(){const w=this.drawto.width;const h=this.drawto.height;let imgPixels=this.ctx.getImageData(0,0,w,h);for(let y=0;y<imgPixels.height;y++){for(let x=0;x<imgPixels.width;x++){let i=y*4*imgPixels.width+x*4;let avg=(imgPixels.data[i]+imgPixels.data[i+1]+imgPixels.data[i+2])/
3;imgPixels.data[i]=avg;imgPixels.data[i+1]=avg;imgPixels.data[i+2]=avg;}}
this.ctx.putImageData(imgPixels,0,0,0,0,imgPixels.width,imgPixels.height);return this;}
cLA(threshold=255){const w=this.drawto.width;const h=this.drawto.height;let imgPixels=this.ctx.getImageData(0,0,w,h);for(let i=0;i<imgPixels.data.length;i+=4){const r=imgPixels.data[i];const g=imgPixels.data[i+1];const b=imgPixels.data[i+2];const gray=0.299*r+0.587*g+0.114*b;imgPixels.data[i]=gray;imgPixels.data[i+1]=gray;imgPixels.data[i+2]=gray;}
const laplacian=[-1,-1,-1,-1,8,-1,-1,-1,-1];const laplacianKernelSize=3;const laplacianDivisor=1;const laplacianOffset=0;const edgeImgPixels=this.convolve(imgPixels,laplacian,laplacianKernelSize,laplacianDivisor,laplacianOffset);for(let i=0;i<edgeImgPixels.data.length;i+=4){edgeImgPixels.data[i]=255-edgeImgPixels.data[i];edgeImgPixels.data[i+1]=255-edgeImgPixels.data[i+1];edgeImgPixels.data[i+2]=255-edgeImgPixels.data[i+2];}
for(let i=0;i<edgeImgPixels.data.length;i+=4){const r=edgeImgPixels.data[i];const g=edgeImgPixels.data[i+1];const b=edgeImgPixels.data[i+2];const gray=(r+g+b)/ 3;if(gray<threshold){edgeImgPixels.data[i]=0;edgeImgPixels.data[i+1]=0;edgeImgPixels.data[i+2]=0;}else{edgeImgPixels.data[i]=255;edgeImgPixels.data[i+1]=255;edgeImgPixels.data[i+2]=255;}}
for(let i=0;i<imgPixels.data.length;i+=4){const gray=imgPixels.data[i];const edge=edgeImgPixels.data[i];const pencil=Math.min(255,gray+edge);imgPixels.data[i]=pencil;imgPixels.data[i+1]=pencil;imgPixels.data[i+2]=pencil;}
this.ctx.putImageData(imgPixels,0,0,0,0,imgPixels.width,imgPixels.height);return this;}
convolve(srcPixels,kernel,kernelSize,divisor,offset){const dstPixels=new ImageData(srcPixels.width,srcPixels.height);const halfKernelSize=Math.floor(kernelSize / 2);const kernelArea=kernelSize*kernelSize;for(let y=0;y<srcPixels.height;y++){for(let x=0;x<srcPixels.width;x++){let sumR=0;let sumG=0;let sumB=0;let sumA=0;for(let j=0;j<kernelSize;j++){for(let i=0;i<kernelSize;i++){const srcX=x+i-halfKernelSize;const srcY=y+j-halfKernelSize;if(srcX>=0&&srcX<srcPixels.width&&srcY>=0&&srcY<srcPixels.height){const srcIndex=(srcY*srcPixels.width+srcX)*4;const kernelIndex=j*kernelSize+i;sumR+=kernel[kernelIndex]*srcPixels.data[srcIndex];sumG+=kernel[kernelIndex]*srcPixels.data[srcIndex+1];sumB+=kernel[kernelIndex]*srcPixels.data[srcIndex+2];sumA+=kernel[kernelIndex]*srcPixels.data[srcIndex+3];}}}
const dstIndex=(y*srcPixels.width+x)*4;dstPixels.data[dstIndex]=Math.min(255,Math.max(0,sumR / divisor+offset));dstPixels.data[dstIndex+1]=Math.min(255,Math.max(0,sumG / divisor+offset));dstPixels.data[dstIndex+2]=Math.min(255,Math.max(0,sumB / divisor+offset));dstPixels.data[dstIndex+3]=Math.min(255,Math.max(0,sumA / divisor+offset));}}
return dstPixels;}
cP(){const w=this.drawto.width;const h=this.drawto.height;let imgPixels=this.ctx.getImageData(0,0,w,h);for(let y=0;y<imgPixels.height;y++){for(let x=0;x<imgPixels.width;x++){let i=y*4*imgPixels.width+x*4;const finalcolor=this.sC([imgPixels.data[i],imgPixels.data[i+1],imgPixels.data[i+2],]);imgPixels.data[i]=finalcolor[0];imgPixels.data[i+1]=finalcolor[1];imgPixels.data[i+2]=finalcolor[2];}}
this.ctx.putImageData(imgPixels,0,0,0,0,imgPixels.width,imgPixels.height);return this;}
rI(){const canvasCopy=document.createElement("canvas");const copyContext=canvasCopy.getContext("2d");let ratio=1.0;if(!this.maxWidth&&!this.maxHeight){return 0;}
if(this.maxWidth&&this.drawto.width>this.maxWidth){ratio=this.maxWidth / this.drawto.width;}
if(this.maxHeight&&this.drawto.height>this.maxHeight){ratio=this.maxHeight / this.drawto.height;}
canvasCopy.width=this.drawto.width;canvasCopy.height=this.drawto.height;copyContext.drawImage(this.drawto,0,0);this.drawto.width=this.drawto.width*ratio;this.drawto.height=this.drawto.height*ratio;this.ctx.drawImage(canvasCopy,0,0,canvasCopy.width,canvasCopy.height,0,0,this.drawto.width,this.drawto.height);return this;}
draw(){this.drawto.width=this.drawfrom.width;this.drawto.height=this.drawfrom.height;this.ctx.drawImage(this.drawfrom,0,0);this.rI();return this;}
sI(){const link=document.createElement("a");link.download="image.png";link.href=this.drawto.toDataURL("image/png").replace("image/png","image/octet-stream");document.querySelector("body").appendChild(link);link.click();document.querySelector("body").removeChild(link);}
fH(){let context=this.ctx.canvas.getContext("2d");let canvas=this.ctx.canvas;let imageData=context.getImageData(0,0,canvas.width,canvas.height);let data=imageData.data;for(let y=0;y<canvas.height;y++){for(let x=0;x<canvas.width / 2;x++){let index=(y*canvas.width+x)*4;let mirrorIndex=(y*canvas.width+(canvas.width-x-1))*4;let r=data[index];let g=data[index+1];let b=data[index+2];let a=data[index+3];data[index]=data[mirrorIndex];data[index+1]=data[mirrorIndex+1];data[index+2]=data[mirrorIndex+2];data[index+3]=data[mirrorIndex+3];data[mirrorIndex]=r;data[mirrorIndex+1]=g;data[mirrorIndex+2]=b;data[mirrorIndex+3]=a;}}
context.putImageData(imageData,0,0);}
iC(){let context=this.ctx.canvas.getContext("2d");let canvas=this.ctx.canvas;let imageData=context.getImageData(0,0,canvas.width,canvas.height);const colors=new Set();for(let i=0;i<imageData.data.length;i+=4){const R=imageData.data[i];const G=imageData.data[i+1];const B=imageData.data[i+2];const color=[R,G,B];const key=color.join(",");colors.add(key);}
const uniqueColors=Array.from(colors).map((color)=>color.split(",").map((val)=>parseInt(val)));const paletteColorDiv=document.getElementById("detected-palettecolor");paletteColorDiv.innerHTML="";for(let i=0;i<uniqueColors.length;i++){const colorBox=document.createElement("div");colorBox.className="colorbox";colorBox.style.backgroundColor=`rgb(${uniqueColors[i][0]},${uniqueColors[i][1]},${uniqueColors[i][2]})`;colorBox.style.width="20px";colorBox.style.height="20px";paletteColorDiv.appendChild(colorBox);}}}